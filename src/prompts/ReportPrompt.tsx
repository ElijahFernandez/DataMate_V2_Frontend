import React, { useEffect, useRef, useState } from "react";
import { Button, Box, Typography, Divider, CircularProgress, Snackbar, Alert } from "@mui/material";
import { styled } from "@mui/system";
import axios from "axios";
import modalStyle from "../styles/ModalStyles";

type ReportProps = {
    toggleImport: () => void;
    startLoading: () => void;
    headers: string[];
    onClose: () => void;
    databaseName: string; // New prop
    tableName: string;    // New prop
    userID: number;       // New prop
  };
  

const styles = {
  dialogPaper: {
    backgroundColor: "#DCF1EC",
    padding: "25px",
  },
  confirmButton: {
    marginTop: "10px",
    borderRadius: "20px",
    height: "45px",
    width: "160px",
    background: "#71C887",
  },
  divider: {
    py: 0,
    width: "100%",
    maxWidth: 360,
    marginTop: "5px",
    marginBottom: "10px",
    borderRadius: 2,
    border: "1px solid",
    borderColor: "divider",
    backgroundColor: "background.paper",
  },
  processingOverlay: {
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flexDirection: "column",
    color: "white",
  },
  headerButton: {
    borderRadius: "20px",
    margin: "5px",
    padding: "10px 20px",
    backgroundColor: "#71C887",
    color: "white",
    "&:hover": {
      backgroundColor: "#3e7f4b", // Darker green for hover state
    },
  },
  headerButtonActive: {
    backgroundColor: "#3e7f4b", // Darker green for active state
  },
};

const ReportPrompt = ({ toggleImport, startLoading, headers, onClose, databaseName, tableName, userID }: ReportProps) => {
//   const [snackbarOpen, setSnackbarOpen] = useState(false);
//   const [snackbarMessage, setSnackbarMessage] = useState("");
//   const [snackbarSeverity, setSnackbarSeverity] = useState<"success" | "error">("success");

  const drop = useRef<HTMLDivElement>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [reportHeaders, setHeaders] = useState<string[]>([]);
  const [activeHeaders, setActiveHeaders] = useState<boolean[]>([]);

  useEffect(() => {
    setHeaders(headers);
    setActiveHeaders(new Array(headers.length).fill(false)); // Initialize active headers state
    console.log("Headers received: ", headers);
    console.log("Database: ", databaseName);
    console.log("Table: ", tableName);
    console.log("User ID: ", userID);
  }, [headers]);

    const processHeaders = async () => {
        setIsProcessing(true);
        try {
        const activeReportHeaders = reportHeaders.filter((_, index) => activeHeaders[index]);
        console.log("Active headers received: ", activeReportHeaders);

        const requestBody = {
            headers: activeReportHeaders,
            dbName: databaseName, // Include the database name
            tblName: tableName,       // Include the table name
        };
        console.log("Request Body:", JSON.stringify(requestBody, null, 2));

        const response = await axios.post("http://localhost:8080/api/reports", requestBody);
        console.log("API response:", response.data);

        } catch (error) {
        console.error("Error processing reports:", error);

        } finally {
        setIsProcessing(false);
        }
    };

    const generateReportName = () => {
        const randomString = Math.random().toString(36).substring(2, 10); // Generates a random string of 8 characters (letters + numbers)
        return `report_${randomString}`;
      };

    const saveSQLToDatabase = async (sqlCode: string) => {
        try {
          const requestBody = {
            reportName: generateReportName, 
            sqlCode, // The SQL code generated by OpenAI
            headers: reportHeaders.filter((_, index) => activeHeaders[index]), // Include active headers
            databaseName, // From props
            tableName, // From props
          };
      
          const response = await axios.post("http://localhost:8080/api/reports/save", requestBody);
          console.log("SQL save response:", response.data);
      
        //   // Set success message for saving
        //   setSnackbarMessage("SQL code saved successfully!");
        //   setSnackbarSeverity("success");
        //   setSnackbarOpen(true);
        } catch (error) {
          console.error("Error saving SQL to database:", error);
      
        //   // Set error message
        //   setSnackbarMessage("Failed to save SQL code.");
        //   setSnackbarSeverity("error");
        //   setSnackbarOpen(true);
        }
      };
      


  const toggleHeader = (index: number) => {
    const updatedActiveHeaders = [...activeHeaders];
    updatedActiveHeaders[index] = !updatedActiveHeaders[index]; // Toggle the header state
    setActiveHeaders(updatedActiveHeaders);
  
    // Log only the headers that are active
    const activeReportHeaders = reportHeaders.filter((_, idx) => updatedActiveHeaders[idx]);
    console.log("Active headers: ", activeReportHeaders);
  };

  return (
    <Box sx={modalStyle}>
      <div ref={drop} className="dropArea">
        <div className="uploadTextContainer">
          <Typography variant="h6">CREATE REPORT</Typography>
          <Divider sx={styles.divider} />
          <Typography variant="subtitle1" sx={{ marginTop: 2, marginBottom: 2 }}>
            Select fields from your table to create a report:
          </Typography>
          <div>
            {reportHeaders.map((header, index) => (
              <Button
                key={index}
                variant="contained"
                sx={{
                  ...styles.headerButton,
                  ...(activeHeaders[index] ? styles.headerButtonActive : {}),
                }}
                onClick={() => toggleHeader(index)}
              >
                {header}
              </Button>
            ))}
            <Button
                variant="contained"
                sx={styles.confirmButton}
                onClick={processHeaders} // Call the processHeaders function on click
                >
                Confirm
            </Button>
          </div>
        </div>
      </div>
      {isProcessing && (
        <div style={styles.processingOverlay as React.CSSProperties}>
          <CircularProgress color="inherit" />
          <Typography variant="h6" style={{ marginTop: '20px' }}>
            Processing Headers...
          </Typography>
        </div>
      )}
    </Box>
  );
};

export default styled(ReportPrompt)({});
