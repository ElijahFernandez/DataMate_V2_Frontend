import React, { useEffect, useRef, useState } from "react";
import { Button, Box, Typography, Divider, CircularProgress, TextField } from "@mui/material";
import { styled } from "@mui/system";
import axios from "axios";
import modalStyle from "../styles/ModalStyles";
import ReportService from "../services/ReportService";

type ReportProps = {
  toggleImport: () => void;
  startLoading: () => void;
  headers: string[];
  onClose: () => void;
  databaseName: string; // New prop
  tableName: string;    // New prop
  userID: number;       // New prop
};

const styles = {
  dialogPaper: {
    backgroundColor: "#DCF1EC",
    padding: "25px",
  },
  confirmButton: {
    marginTop: "10px",
    borderRadius: "20px",
    height: "45px",
    width: "160px",
    background: "#71C887",
  },
  divider: {
    py: 0,
    width: "100%",
    maxWidth: 360,
    marginTop: "5px",
    marginBottom: "10px",
    borderRadius: 2,
    border: "1px solid",
    borderColor: "divider",
    backgroundColor: "background.paper",
  },
  processingOverlay: {
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flexDirection: "column",
    color: "white",
  },
  headerButton: {
    borderRadius: "20px",
    margin: "5px",
    padding: "10px 20px",
    backgroundColor: "#71C887",
    color: "white",
    "&:hover": {
      backgroundColor: "#3e7f4b", // Darker green for hover state
    },
  },
  headerButtonActive: {
    backgroundColor: "#3e7f4b", // Darker green for active state
  },
  textField: {
    marginTop: "20px",
    width: "100%",
  },
};

interface ReportEntity {
  reportId?: number;
  reportName: string;
  reportCode: string;
  userId: number;
}

const API_URL = process.env.REACT_APP_API_URL || "http://localhost:8080";
const CLIENT_URL = process.env.REACT_APP_CLIENT_URL || "http://localhost:3000";

const ReportPrompt = ({ toggleImport, startLoading, headers, onClose, databaseName, tableName, userID }: ReportProps) => {
  const drop = useRef<HTMLDivElement>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [reportHeaders, setHeaders] = useState<string[]>([]);
  const [activeHeaders, setActiveHeaders] = useState<boolean[]>([]);
  const [addPrompt, setAddPrompt] = useState<string>("");

  useEffect(() => {
    setHeaders(headers);
    setActiveHeaders(new Array(headers.length).fill(false)); // Initialize active headers state
    console.log("Headers received: ", headers);
    console.log("Database: ", databaseName);
    console.log("Table: ", tableName);
    console.log("User ID: ", userID);
  }, [headers]);

  const processHeaders = async () => {
    setIsProcessing(true);
    try {
      const activeReportHeaders = reportHeaders.filter((_, index) => activeHeaders[index]);
      console.log("Active headers received: ", activeReportHeaders);

      const requestBody = {
        headers: activeReportHeaders,
        dbName: databaseName, // Include the database name
        tblName: tableName,   // Include the table name
        addPrompt: addPrompt,
      };
      console.log("Request Body:", JSON.stringify(requestBody, null, 2));

      // const response = await axios.post("http://localhost:8080/api/reports", requestBody);
      const response = await axios.post(`${API_URL}/api/reports`, requestBody);
      // const response = await ReportService.processReportHeaders(requestBody);
      console.log("API response:", response.data);
      saveSQLToDatabase(response.data);

    } catch (error) {
      console.error("Error processing reports:", error);
    } finally {
      setIsProcessing(false);
    }
  };

  const generateReportName = () => {
    const randomString = Math.random().toString(36).substring(2, 10); // Generates a random string of 8 characters (letters + numbers)
    console.log("Generated report name:", `report_${randomString}`);
    return `report_${randomString}`;
  };

  const saveSQLToDatabase = async (reportCode: string) => {
    try {
      const requestBody: ReportEntity = {
        reportName: generateReportName(),
        reportCode, // The SQL code generated by OpenAI
        userId: userID,
      };

      console.log("Request Body for SQL Posting:", JSON.stringify(requestBody, null, 2));
      // const response = await axios.post("http://localhost:8080/postReports", requestBody);
      const response = await axios.post(`${API_URL}/postReports`, requestBody);

      // const response = await ReportService.postReports(requestBody);

      console.log("SQL save response:", response.data);

      // Prompt success message and redirect
      alert("Report saved successfully!");
      // window.location.href = "http://localhost:3000"; // Redirect to base URL
      window.location.href = "/"; // Redirect to base page
    } catch (error) {
      console.error("Error saving SQL to database:", error);
      // Prompt error message
      alert("An error occurred while saving the report. Please try again.");
    }
  };

  const toggleHeader = (index: number) => {
    const updatedActiveHeaders = [...activeHeaders];
    updatedActiveHeaders[index] = !updatedActiveHeaders[index]; // Toggle the header state
    setActiveHeaders(updatedActiveHeaders);

    // Log only the headers that are activ
    const activeReportHeaders = reportHeaders.filter((_, idx) => updatedActiveHeaders[idx]);
    console.log("Active headers: ", activeReportHeaders);
  };

  return (
    <Box sx={modalStyle}>
      <div ref={drop} className="dropArea">
        <div className="uploadTextContainer">
          <Typography variant="h6">CREATE REPORT</Typography>
          <Divider sx={styles.divider} />
          <Typography variant="subtitle1" sx={{ marginTop: 2, marginBottom: 2 }}>
            Select fields from your table to create a report:
          </Typography>
          <div>
            {reportHeaders.map((header, index) => (
              <Button
                key={index}
                variant="contained"
                sx={{
                  ...styles.headerButton,
                  ...(activeHeaders[index] ? styles.headerButtonActive : {}),
                }}
                onClick={() => toggleHeader(index)}
              >
                {header}
              </Button>
            ))}
          </div>
          {/* Confirm button in a new Box for separate placement */}
          <Box sx={{ display: "flex", justifyContent: "center", marginTop: "20px" }}>
            <Button
              variant="contained"
              sx={styles.confirmButton}
              onClick={processHeaders} // Call the processHeaders function on click
            >
              Confirm
            </Button>
          </Box>

           {/* TextField for additional prompts */}
           <TextField
            sx={styles.textField}
            placeholder="Add prompts to narrow down your report, e.g., 'Ages between 5-15.'"
            variant="outlined"
            multiline
            rows={3}
            value={addPrompt}
            onChange={(e) => setAddPrompt(e.target.value)}  // Update state on text change
          />
        </div>
      </div>
      {isProcessing && (
        <div style={styles.processingOverlay as React.CSSProperties}>
          <CircularProgress color="inherit" />
          <Typography variant="h6" style={{ marginTop: '20px' }}>
            Processing Headers...
          </Typography>
        </div>
      )}
    </Box>
  );
};

export default styled(ReportPrompt)({});
